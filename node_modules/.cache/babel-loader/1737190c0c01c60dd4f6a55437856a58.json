{"ast":null,"code":"var _jsxFileName = \"/Users/aladdin/Documents/richtext-editor-demo/src/JoditDemo.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState, useRef, useEffect } from \"react\";\nimport JoditEditor from \"jodit-react\";\nimport { Input, Divider } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function JoditDemo() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Hello, this is Jodit!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(JoditApp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 12\n  }, this);\n}\n_c = JoditDemo;\nexport function JoditApp() {\n  _s();\n\n  const editor = useRef(null);\n  const [content, setContent] = useState(\"\");\n  const config = {\n    readonly: false,\n    height: 400\n  };\n  const tmp = useState('');\n  const inputTmp = useState(''); //load only once.\n\n  useEffect(() => {\n    tmp[1](content);\n    inputTmp[1](content);\n  }, []);\n\n  function onChangeHandler(content) {\n    const JSONcontent = JSON.stringify(content);\n    console.log(\"content:\");\n    console.log(content);\n    console.log(\"JSONcontent:\");\n    console.log(JSONcontent);\n  }\n\n  function clickHandler(event) {\n    tmp[1](content);\n    inputTmp[1](content);\n  }\n\n  function onBlur(content) {\n    setContent(content);\n  }\n\n  function inputEventHandler(value) {\n    inputTmp[1](value);\n    console.log(\"input handler\");\n    console.log(inputTmp[0]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React Editors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Start editing to see some magic happen!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(JoditEditor, {\n      ref: editor,\n      value: content,\n      config: config,\n      onBlur: newContent => onBlur(newContent),\n      onChange: newContent => {\n        onChangeHandler(newContent);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: event => clickHandler(event),\n      children: \"serialize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 76\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"20\",\n      cols: \"100\",\n      value: tmp[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      value: inputTmp[0],\n      onChange: value => inputEventHandler(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(JoditApp, \"9N2+6TLcaSR6cHE2IjN51kjTYoo=\");\n\n_c2 = JoditApp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"JoditDemo\");\n$RefreshReg$(_c2, \"JoditApp\");","map":{"version":3,"sources":["/Users/aladdin/Documents/richtext-editor-demo/src/JoditDemo.js"],"names":["React","useState","useRef","useEffect","JoditEditor","Input","Divider","JoditDemo","JoditApp","editor","content","setContent","config","readonly","height","tmp","inputTmp","onChangeHandler","JSONcontent","JSON","stringify","console","log","clickHandler","event","onBlur","inputEventHandler","value","newContent"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React, { useState, useRef,useEffect } from \"react\";\nimport JoditEditor from \"jodit-react\";\nimport {Input,Divider} from 'antd';\n\nexport function JoditDemo(){\n    return <div>\n        <label>Hello, this is Jodit!</label>\n        <JoditApp />\n    </div>;\n}\n\nexport function JoditApp() {\n    const editor = useRef(null);\n    const [content, setContent] = useState(\"\");\n    const config = {\n        readonly: false,\n        height: 400\n    };\n    const tmp = useState('');\n    const inputTmp = useState('');\n    //load only once.\n    useEffect(() => {\n        tmp[1](content);\n        inputTmp[1](content);\n    },[]);\n\n\n    function onChangeHandler(content){\n        const JSONcontent = JSON.stringify(content)\n        console.log(\"content:\");\n        console.log(content);\n        console.log(\"JSONcontent:\");\n        console.log(JSONcontent);\n    }\n\n    function clickHandler(event){\n        tmp[1](content);\n        inputTmp[1](content);\n    }\n\n    function onBlur(content){\n        setContent(content);\n    }\n\n    function inputEventHandler(value){\n        inputTmp[1](value);\n        console.log(\"input handler\");\n        console.log(inputTmp[0]);\n    }\n\n    return (\n        <div >\n            <h1>React Editors</h1>\n            <h2>Start editing to see some magic happen!</h2>\n            <JoditEditor\n                ref={editor}\n                value={content}\n                config={config}\n                onBlur={newContent => onBlur(newContent)}\n                onChange={(newContent) => {onChangeHandler(newContent)}}\n            />\n            <button onClick={event=>clickHandler(event)}>serialize</button><br></br>\n            <textarea rows=\"20\" cols=\"100\" value={tmp[0]}/>\n            <Input value={inputTmp[0]} onChange={(value)=>inputEventHandler(value)}></Input>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}