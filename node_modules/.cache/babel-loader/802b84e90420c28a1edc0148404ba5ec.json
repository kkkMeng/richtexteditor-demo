{"ast":null,"code":"var _jsxFileName = \"/Users/aladdin/Documents/richtext-editor-demo/src/Jodit2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport JoditEditor from \"jodit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Hello = () => {\n  _s();\n\n  const [config, setConfig] = useState({\n    readonly: false,\n    toolbar: true\n  });\n  const [textAreaValue, setTextAreaValue] = useState('Test');\n  const [inputValue, setInputValue] = useState('');\n  const [spin, setSpin] = useState(1);\n\n  const toggleToolbar = () => setConfig(config => ({ ...config,\n    toolbar: !config.toolbar\n  }));\n\n  const toggleReadOnly = () => setConfig(config => ({ ...config,\n    readonly: !config.readonly\n  }));\n\n  const handleBlurAreaChange = (textAreaValue, event) => {\n    console.log('handleBlurAreaChange', textAreaValue, event);\n  };\n\n  const handleTextAreaChange = newTextAreaValue => {\n    console.log('handleTextAreaChange', newTextAreaValue);\n    return setTextAreaValue(() => newTextAreaValue);\n  };\n\n  const handleInputChange = e => {\n    const {\n      value\n    } = e.target;\n    setInputValue(() => value);\n    handleTextAreaChange(value);\n  };\n\n  const handleSpin = () => setSpin(spin => ++spin);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(JoditEditor, {\n      config: config,\n      onChange: handleTextAreaChange,\n      onBlur: handleBlurAreaChange,\n      value: textAreaValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleInputChange,\n      placeholder: \"enter some text\",\n      type: \"text\",\n      value: inputValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleReadOnly,\n      type: \"button\",\n      children: 'Toggle Read-Only'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleToolbar,\n      type: \"button\",\n      children: 'Toggle Toolbar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSpin,\n      children: `Spin ${spin}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Hello, \"ht4LCN7Kwa+qu/Gv++EExukeUQk=\");\n\n_c = Hello;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hello\");","map":{"version":3,"sources":["/Users/aladdin/Documents/richtext-editor-demo/src/Jodit2.js"],"names":["React","useState","JoditEditor","Hello","config","setConfig","readonly","toolbar","textAreaValue","setTextAreaValue","inputValue","setInputValue","spin","setSpin","toggleToolbar","toggleReadOnly","handleBlurAreaChange","event","console","log","handleTextAreaChange","newTextAreaValue","handleInputChange","e","value","target","handleSpin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAOC,WAAP,MAAwB,aAAxB;;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC;AACjCK,IAAAA,QAAQ,EAAE,KADuB;AAEjCC,IAAAA,OAAO,EAAE;AAFwB,GAAD,CAApC;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,MAAD,CAAlD;AAEA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;;AAEA,QAAMa,aAAa,GAAG,MAClBT,SAAS,CAACD,MAAM,KAAK,EACjB,GAAGA,MADc;AAEjBG,IAAAA,OAAO,EAAE,CAACH,MAAM,CAACG;AAFA,GAAL,CAAP,CADb;;AAOA,QAAMQ,cAAc,GAAG,MACnBV,SAAS,CAACD,MAAM,KAAK,EACjB,GAAGA,MADc;AAEjBE,IAAAA,QAAQ,EAAE,CAACF,MAAM,CAACE;AAFD,GAAL,CAAP,CADb;;AAOA,QAAMU,oBAAoB,GAAG,CAACR,aAAD,EAAgBS,KAAhB,KAA0B;AACnDC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCX,aAApC,EAAmDS,KAAnD;AACH,GAFD;;AAIA,QAAMG,oBAAoB,GAAGC,gBAAgB,IAAI;AAC7CH,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCE,gBAApC;AAEA,WACIZ,gBAAgB,CAAC,MAAMY,gBAAP,CADpB;AAGH,GAND;;AAQA,QAAMC,iBAAiB,GAAGC,CAAC,IAAI;AAC3B,UAAM;AAACC,MAAAA;AAAD,QAAUD,CAAC,CAACE,MAAlB;AACAd,IAAAA,aAAa,CAAC,MAAMa,KAAP,CAAb;AACAJ,IAAAA,oBAAoB,CAACI,KAAD,CAApB;AACH,GAJD;;AAMA,QAAME,UAAU,GAAG,MAAMb,OAAO,CAACD,IAAI,IAAI,EAAEA,IAAX,CAAhC;;AAEA,sBACI;AAAA,4BACI,QAAC,WAAD;AACI,MAAA,MAAM,EAAER,MADZ;AAEI,MAAA,QAAQ,EAAEgB,oBAFd;AAGI,MAAA,MAAM,EAAEJ,oBAHZ;AAII,MAAA,KAAK,EAAER;AAJX;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI;AACI,MAAA,QAAQ,EAAEc,iBADd;AAEI,MAAA,WAAW,EAAE,iBAFjB;AAGI,MAAA,IAAI,EAAE,MAHV;AAII,MAAA,KAAK,EAAEZ;AAJX;AAAA;AAAA;AAAA;AAAA,YARJ,eAeI;AACI,MAAA,OAAO,EAAEK,cADb;AAEI,MAAA,IAAI,EAAE,QAFV;AAAA,gBAGK;AAHL;AAAA;AAAA;AAAA;AAAA,YAfJ,eAqBI;AACI,MAAA,OAAO,EAAED,aADb;AAEI,MAAA,IAAI,EAAE,QAFV;AAAA,gBAGK;AAHL;AAAA;AAAA;AAAA;AAAA,YArBJ,eA2BI;AACI,MAAA,IAAI,EAAE,QADV;AAEI,MAAA,OAAO,EAAEY,UAFb;AAAA,gBAGM,QAAOd,IAAK;AAHlB;AAAA;AAAA;AAAA;AAAA,YA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CAjFM;;GAAMT,K;;KAAAA,K","sourcesContent":["import React, {useState} from 'react';\n\nimport JoditEditor from \"jodit-react\";\n\nexport const Hello = () => {\n    const [config, setConfig] = useState({\n        readonly: false,\n        toolbar: true,\n    })\n\n    const [textAreaValue, setTextAreaValue] = useState('Test')\n\n    const [inputValue, setInputValue] = useState('')\n\n    const [spin, setSpin] = useState(1)\n\n    const toggleToolbar = () => (\n        setConfig(config => ({\n            ...config,\n            toolbar: !config.toolbar,\n        }))\n    )\n\n    const toggleReadOnly = () => (\n        setConfig(config => ({\n            ...config,\n            readonly: !config.readonly,\n        }))\n    )\n\n    const handleBlurAreaChange = (textAreaValue, event) => {\n        console.log('handleBlurAreaChange', textAreaValue, event)\n    };\n\n    const handleTextAreaChange = newTextAreaValue => {\n        console.log('handleTextAreaChange', newTextAreaValue)\n\n        return (\n            setTextAreaValue(() => newTextAreaValue)\n        )\n    }\n\n    const handleInputChange = e => {\n        const {value} = e.target\n        setInputValue(() => value)\n        handleTextAreaChange(value)\n    }\n\n    const handleSpin = () => setSpin(spin => ++spin)\n\n    return (\n        <div>\n            <JoditEditor\n                config={config}\n                onChange={handleTextAreaChange}\n                onBlur={handleBlurAreaChange}\n                value={textAreaValue}\n            />\n\n            <input\n                onChange={handleInputChange}\n                placeholder={\"enter some text\"}\n                type={\"text\"}\n                value={inputValue}\n            />\n\n            <button\n                onClick={toggleReadOnly}\n                type={\"button\"}>\n                {'Toggle Read-Only'}\n            </button>\n\n            <button\n                onClick={toggleToolbar}\n                type={\"button\"}>\n                {'Toggle Toolbar'}\n            </button>\n\n            <button\n                type={\"button\"}\n                onClick={handleSpin}>\n                {`Spin ${spin}`}\n            </button>\n        </div>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}